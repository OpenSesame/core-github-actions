name: "Cleanup"
description: "Cleanup provisioned resources"
inputs:
  github_ssh_key:
    description: "Github SSH Key to read shared terraform modules"
    required: true
  terraform_root:
    description: "Terraform root configuration name"
    required: true
  terraform_workspace:
    description: "Terraform workspace to select"
    required: true
  node_auth_token:
    description: "Node auth token environment variable"
    required: false

runs:
  using: "composite"
  steps:
    - name: Configure Github Credentials
      shell: bash
      run: |
        mkdir -p ~/.ssh
        chmod 700 ~/.ssh
        echo '${{ inputs.github_ssh_key }}' > ~/.ssh/id_rsa
        ssh-keyscan github.com > ~/.ssh/known_hosts
        chmod 600 ~/.ssh/id_rsa ~/.ssh/known_hosts

    - name: Npm CI
      shell: bash
      run: npm ci
      env:
        NODE_AUTH_TOKEN: ${{ inputs.node_auth_token }}

    # Some destroy actions require the build artifacts to be present in order to destroy properly.
    # Use the --force flag to ignore errors, so that invalid builds can still be cleaned up.
    - name: Build
      shell: bash
      run: npm run build --if-present --force

    - name: Read Secrets Into Env
      shell: bash
      run: |
        echo read secrets into ./terraform/.env
        ./node_modules/.bin/core-build build-secrets > ./terraform/.env

    - name: Terraform Cleanup
      shell: bash
      working-directory: terraform/${{ inputs.terraform_root }}
      run: |
        echo terraform init
        terraform init -upgrade

        echo select terraform workspace ${{ inputs.terraform_workspace }}
        node ../../node_modules/.bin/core-build select-workspace -w ${{ inputs.terraform_workspace }}

        echo terraform destroy
        ../../node_modules/.bin/env-cmd -f ../.env terraform destroy -auto-approve -no-color

        echo terraform select default workspace
        terraform workspace select default

        echo terraform delete workspace
        terraform workspace delete ${{ inputs.terraform_workspace }}
