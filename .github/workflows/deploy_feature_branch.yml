name: "Reusable - Deploy Feature Branch to Dev"

on:
  workflow_call:
    inputs:
      terraform_workspace:
        description: 'Terraform workspace'
        required: true
        type: string
      role_session_name_suffix:
        description: 'Suffix for the role session name'
        required: true
        type: string
      deploy_fargate:
        description: 'Deploy Fargate'
        required: true
        default: false
        type: boolean
      slack_notification_title:
        description: 'Slack Notification Title'
        required: false
        type: string
    secrets:
      ORG_READ_ONLY_SSH_KEY:
        required: true
      ORG_GITHUB_PACKAGES_READ_ONLY_TOKEN:
        required: true
      CORE_ENG_DEPLOYMENTS_SLACK_WEBHOOK:
        required: true

permissions:
  id-token: write
  contents: read

jobs:
  BuildAndApply:
    runs-on: ubuntu-latest
    environment: dev
    outputs:
      name_prefix: ${{ steps.build_apply.outputs.name_prefix }}
      api_endpoint: ${{ steps.build_apply.outputs.api_endpoint }}
      deploy_fargate: ${{ inputs.deploy_fargate }}

    steps:
      - name: Checkout Actions
        uses: actions/checkout@v3

      - name: Setup Node
        uses: actions/setup-node@v3
        with:
          node-version: "20.x"
          registry-url: "https://npm.pkg.github.com"

      - name: Cache Node Modules
        uses: actions/cache@v2
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: ${{ runner.os }}-node-

      - name: Install packages
        env:
          NODE_AUTH_TOKEN: ${{ secrets.ORG_GITHUB_PACKAGES_READ_ONLY_TOKEN }}
        run: |
          cd e2e
          npm ci

      - name: Configure AWS Credentials for Dev
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.CORE_DEV_AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.CORE_DEV_AWS_SECRET_ACCESS_KEY }}
          aws-region: us-west-1
          role-to-assume: ${{ env.ROLE_ARN }}
          role-duration-seconds: 3600

      - name: Authorize tests in DEV
        run: |
          node e2e/cli/authorize.js --dev
          echo "IUM_ACCESS_TOKEN=$(cat ium.txt)" >> $GITHUB_ENV

      - name: Configure AWS Credentials in Stage
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.CORE_STAGE_AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.CORE_STAGE_AWS_SECRET_ACCESS_KEY }}
          aws-region: us-west-1
          role-to-assume: ${{ env.STAGE_ROLE_ARN }}
          role-duration-seconds: 3600

      - name: Authorize tests in STAGE
        run: |
          node e2e/cli/authorize.js --stage
          echo "USERSTORE_ACCESS_TOKEN=$(cat ius.txt)" >> $GITHUB_ENV

      - name: Running E2E Tests
        env:
          IUM_ACCESS_TOKEN: ${{ env.IUM_ACCESS_TOKEN }}
          USERSTORE_ACCESS_TOKEN: ${{ env.USERSTORE_ACCESS_TOKEN }}
          TF_API_ENDPOINT: ${{ env.TF_API_ENDPOINT }}
        run: |
          cd e2e
          npm run test

      - uses: ravsamhq/notify-slack-action@v2
        if: always()
        with:
          status: ${{ job.status }}
          token: ${{ secrets.GITHUB_TOKEN }}
          notification_title: "E2E Test Status for ${{ github.ref_name }} - ${{ github.workflow }} <${{ inputs.slack_notification_title }}|Link to Run>"
          message_format: "{emoji} E2E Tests {status_message} in <{repo_url}|{repo}>"
          footer: "Workflow: {run_url}|View>"
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.CORE_ENG_DEPLOYMENTS_SLACK_WEBHOOK }}
