name: "Reusable - Deploy Feature Branch to Dev"

on:
  workflow_call:
    inputs:
      terraform_workspace:
        description: 'Terraform workspace'
        required: true
        type: string
      role_session_name_suffix:
        description: 'Suffix for the role session name'
        required: true
        type: string
      deploy_fargate:
        description: 'Deploy Fargate'
        required: true
        default: false
        type: boolean
      slack_notification_title:
        description: 'Slack Notification Title'
        required: false
        type: string
    secrets:
      ORG_READ_ONLY_SSH_KEY:
        required: true
      ORG_GITHUB_PACKAGES_READ_ONLY_TOKEN:
        required: true
      CORE_ENG_DEPLOYMENTS_SLACK_WEBHOOK:
        required: true

permissions:
  id-token: write
  contents: read

jobs:
  BuildAndApply:
    runs-on: ubuntu-latest
    environment: dev
    outputs:
      name_prefix: ${{ steps.build_apply.outputs.name_prefix }}
      api_endpoint: ${{ steps.build_apply.outputs.api_endpoint }}
      deploy_fargate: ${{ inputs.deploy_fargate }}

    steps:
      - id: get-role-arn
        uses: OpenSesame/gha-oidc-access/get-role-arn@v2
        with:
          domain: core
          env: dev
          ORG_READ_ONLY_SSH_KEY: ${{ secrets.ORG_READ_ONLY_SSH_KEY }}

      - uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ steps.get-role-arn.outputs.role-arn }}
          role-session-name: deployBranchDev-Run${{ inputs.role_session_name_suffix }}
          aws-region: ${{ steps.get-role-arn.outputs.region }}

      - name: Actions - Checkout Repo
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: "20.x"
          registry-url: "https://npm.pkg.github.com"

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.6.3
          terraform_wrapper: false

      - name: Login to Amazon ECR
        if: ${{ inputs.deploy_fargate }}
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Install IUM App Packages & Build App
        if: ${{ inputs.deploy_fargate }}
        run: |
          cd lambdas/user-management-api
          npm ci
          npm run build

      - name: Build And Apply Feature Branch to Dev
        uses: opensesame/core-github-actions/build-apply@v1
        with:
          github_ssh_key: ${{ secrets.ORG_READ_ONLY_SSH_KEY }}
          terraform_root: dev
          terraform_workspace: ${{ inputs.terraform_workspace }}
          node_auth_token: ${{ secrets.ORG_GITHUB_PACKAGES_READ_ONLY_TOKEN }}

      - name: Get Feature Branch Prefix
        if: ${{ inputs.deploy_fargate }}
        id: get_branch_prefix
        run: |
          FEATURE_BRANCH_ENV=$(echo "${{ github.ref }}" | awk -F'/' '{print tolower($NF)}' | tr '_' '-' | cut -c 1-15 | sed 's/-*$//')
          echo "FEATURE_BRANCH_ENV=$FEATURE_BRANCH_ENV" >> $GITHUB_ENV
          echo "::set-output name=feature_branch_env::$FEATURE_BRANCH_ENV"

      - name: Build, Tag, and Push IUM API Image to Dev ECR
        if: ${{ inputs.deploy_fargate }}
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: latest
          ECR_REPOSITORY: ${{ env.FEATURE_BRANCH_ENV }}-ium-ecr-repository
        run: |
          cd lambdas/user-management-api
          docker build -t $ECR_REPOSITORY:latest --platform linux/arm64 -f Dockerfile .
          docker tag $ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

      - name: Update IUM ECS Service to use new image
        if: ${{ inputs.deploy_fargate }}
        env:
          ECR_CLUSTER: ${{ env.FEATURE_BRANCH_ENV }}-ium-ecr-cluster
          ECS_SERVICE: ${{ env.FEATURE_BRANCH_ENV }}-ium-ecs-service
        run: |
          aws ecs update-service --cluster $ECR_CLUSTER --service $ECS_SERVICE --force-new-deployment

      - name: Deploy to Dev
        uses: opensesame/core-github-actions/deploy@v1
        with:
          github_ssh_key: ${{ secrets.ORG_READ_ONLY_SSH_KEY }}
          terraform_root: dev
          terraform_workspace: ${{ inputs.terraform_workspace }}

  E2ETest:
    if: ${{ needs.BuildAndApply.outputs.deploy_fargate }}
    name: E2E Tests
    runs-on: ubuntu-latest
    needs: BuildAndApply
    env:
      TF_API_ENDPOINT: ${{ needs.BuildAndApply.outputs.api_endpoint }}

    steps:
      - id: get-role-arn-dev
        uses: OpenSesame/gha-oidc-access/get-role-arn@v2
        with:
          domain: core
          env: dev
          ORG_READ_ONLY_SSH_KEY: ${{ secrets.ORG_READ_ONLY_SSH_KEY }}

      - uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ steps.get-role-arn-dev.outputs.role-arn }}
          role-session-name: deployBranchDev2-Run${{ inputs.role_session_name_suffix }}
          aws-region: ${{ steps.get-role-arn-dev.outputs.region }}
          role-chaining: true

      - name: Authorize tests in DEV
        run: |
          node e2e/cli/authorize.js --dev
          echo "IUM_ACCESS_TOKEN=$(cat ium.txt)" >> $GITHUB_ENV

      - id: get-role-arn-stage
        uses: OpenSesame/gha-oidc-access/get-role-arn@v2
        with:
          domain: core
          env: stage
          ORG_READ_ONLY_SSH_KEY: ${{ secrets.ORG_READ_ONLY_SSH_KEY }}

      - uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ steps.get-role-arn-stage.outputs.role-arn }}
          role-session-name: deployBranchStage-Run${{ inputs.role_session_name_suffix }}
          aws-region: ${{ steps.get-role-arn-stage.outputs.region }}
          role-chaining: true

      - name: Authorize tests in STAGE
        run: |
          node e2e/cli/authorize.js --stage
          echo "USERSTORE_ACCESS_TOKEN=$(cat ius.txt)" >> $GITHUB_ENV

      - name: Checkout Actions
        uses: actions/checkout@v3

      - name: Setup Node
        uses: actions/setup-node@v3
        with:
          node-version: "20.x"
          registry-url: "https://npm.pkg.github.com"

      - name: Cache Node Modules
        uses: actions/cache@v2
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: ${{ runner.os }}-node-

      - name: Install packages
        env:
          NODE_AUTH_TOKEN: ${{ secrets.ORG_GITHUB_PACKAGES_READ_ONLY_TOKEN }}
        run: |
          cd e2e
          npm ci

      - name: Running E2E Tests
        env:
          IUM_ACCESS_TOKEN: ${{ env.IUM_ACCESS_TOKEN }}
          USERSTORE_ACCESS_TOKEN: ${{ env.USERSTORE_ACCESS_TOKEN }}
          TF_API_ENDPOINT: ${{ env.TF_API_ENDPOINT }}
        run: |
          cd e2e
          npm run test

      - uses: ravsamhq/notify-slack-action@v2
        if: always()
        with:
          status: ${{ job.status }}
          token: ${{ secrets.GITHUB_TOKEN }}
          notification_title: "{workflow}: E2E Test Status for {branch} - {workflow} <${{ inputs.slack_notification_title }}|Link to Run>"
          message_format: "{emoji} E2E Tests {status_message} in <{repo_url}|{repo}>"
          footer: "Workflow: {run_url}|View>"
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.CORE_ENG_DEPLOYMENTS_SLACK_WEBHOOK }}
