name: Semgrep CE Scan

defaults:
  run:
    shell: bash

on:
  workflow_call:
    inputs:
      commit_identifier:
        description: "Commit SHA or ref to scan (default: current ref)"
        type: string
        required: true
      cancel_in_progress:
        description: "Cancel in-progress run for the same ref"
        type: boolean
        default: true
      semgrep_config:
        description: "Rulesets to run with Semgrep"
        type: string
        default: "p/default"
      fail_severity:
        description: "error | warning | info"
        type: string
        default: "error"
      scan_mode:
        description: What should Semgrep scan? "full | diff | baseline"
        type: string
        default: "full"
      pr_filter_mode:
        description: What should reviewdog display (does NOT change what Semgrep scans)? "added | diff_context | nofilter"
        type: string
        default: "added"
      baseline_ref:
        description: "Ref for diff/baseline (e.g., origin/main)"
        type: string
        default: "origin/main"
      pr_reporter:
        description: "review output: github-pr-review | github-pr-check"
        type: string
        default: "github-pr-review"
    outputs:
      total_findings:
        description: "Total number of findings"
        value: ${{ jobs.semgrep.outputs.total_findings }}
      error_count:
        description: "Number of ERROR findings"
        value: ${{ jobs.semgrep.outputs.error_count }}
      warning_count:
        description: "Number of WARNING findings"
        value: ${{ jobs.semgrep.outputs.warning_count }}
      info_count:
        description: "Number of INFO findings"
        value: ${{ jobs.semgrep.outputs.info_count }}

  workflow_dispatch:

permissions:
  contents: read
  pull-requests: write
  checks: write # needed if reporter is github-pr-check or github-check

concurrency:
  group: semgrep-${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: ${{ inputs.cancel_in_progress }}

jobs:
  semgrep:
    name: Run Semgrep
    runs-on: ubuntu-latest

    container:
      image: semgrep/semgrep:1.137.0

    outputs:
      total_findings: ${{ steps.semgrep_metrics.outputs.total }}
      error_count:    ${{ steps.semgrep_metrics.outputs.errors }}
      warning_count:  ${{ steps.semgrep_metrics.outputs.warnings }}
      info_count:     ${{ steps.semgrep_metrics.outputs.info }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ inputs.commit_identifier }}
          # Full history only when diff/baseline is requested
          fetch-depth: ${{ inputs.scan_mode == 'full' && '1' || '0' }}

      - name: Check for open PR (by commit)
        id: pr_check
        uses: actions/github-script@v7
        with:
          script: |
            const { owner, repo } = context.repo;
            const ref = '${{ inputs.commit_identifier }}'; // required input
            // Commit → PRs endpoint (needs the 'groot' preview)
            const res = await github.request('GET /repos/{owner}/{repo}/commits/{ref}/pulls', {
              owner, repo, ref,
              mediaType: { previews: ['groot'] }
            });
            const pr = res.data.find(p => p.state === 'open');
            core.setOutput('pr_exists', pr ? 'true' : 'false');
            if (pr) {
              core.info(`Found open PR #${pr.number} for commit ${ref}`);
              core.setOutput('pr_number', pr.number.toString());
              core.setOutput('pr_url', pr.html_url);
            } else {
              core.info(`No open PR found for commit ${ref}`);
            }

      - name: Compute baseline (for diff/baseline)
        if: ${{ inputs.scan_mode != 'full' }}
        env:
          EVENT_NAME: ${{ github.event_name }}
          BASE_REF: ${{ github.base_ref }}
          BASELINE_REF: ${{ inputs.baseline_ref }}
          HAS_PR: ${{ steps.pr_check.outputs.pr_exists }}
        run: |
          set -Eeuo pipefail

          if [[ "$EVENT_NAME" == "pull_request" || "$HAS_PR" == "true" ]]; then
            # Resolve the PR base branch name
            if [[ "$EVENT_NAME" == "pull_request" && -n "$BASE_REF" ]]; then
              base="$BASE_REF"
            else
              # push + open PR → ask GitHub for the base branch of that PR
              base="$(gh pr list --state open --head "$GITHUB_REF_NAME" --json baseRefName -q '.[0].baseRefName' || true)"
            fi

            if [[ -z "$base" ]]; then
              echo "Could not resolve PR base; falling back to configured baseline: $BASELINE_REF"
              echo "BASELINE=$BASELINE_REF" >> "$GITHUB_ENV"
              git fetch origin "${BASELINE_REF#origin/}:${BASELINE_REF#origin/}" --depth=1 || true
            else
              echo "Using PR base: origin/$base"
              echo "BASELINE=origin/$base" >> "$GITHUB_ENV"
              git fetch origin "$base:$base" --depth=1
            fi
          else
            echo "Using configured baseline: $BASELINE_REF"
            echo "BASELINE=$BASELINE_REF" >> "$GITHUB_ENV"
            git fetch origin "${BASELINE_REF#origin/}:${BASELINE_REF#origin/}" --depth=1 || true
          fi

      - name: Set up Reviewdog
        uses: reviewdog/action-setup@v1
        with:
          reviewdog_version: v0.20.3

      - name: Override Reviewdog settings if not a PR
        id: verified_settings
        env:
          EVENT_NAME: ${{ github.event_name }}
          REPORTER: ${{ inputs.pr_reporter }}
          FILTER_MODE: ${{ inputs.pr_filter_mode }}
          HAS_PR: ${{ steps.pr_check.outputs.pr_exists }}
        run: |
          set -Eeuo pipefail
          echo "event=$EVENT_NAME, has_pr=$HAS_PR"
          echo "Input reporter: $REPORTER"
          echo "Input filter mode: $FILTER_MODE"

          if [[ "$EVENT_NAME" == "pull_request" || "$HAS_PR" == "true" ]]; then
            # Keep PR-oriented settings
            :
          else
            echo "No PR context; using github-check reporter with nofilter"
            REPORTER=github-check
            FILTER_MODE=nofilter
          fi

          echo "REPORTER=$REPORTER" >> "$GITHUB_OUTPUT"
          echo "FILTER_MODE=$FILTER_MODE" >> "$GITHUB_OUTPUT"

      - name: Install jq
        run: apk add --no-cache jq

      - name: Run Semgrep
        id: semgrep
        env:
          SCAN_MODE:    ${{ inputs.scan_mode }}
          BASELINE:     ${{ env.BASELINE }}
          SEMGREP_RULES: ${{ inputs.semgrep_config }}
          FAIL_LEVEL:    ${{ inputs.fail_severity }}
        run: |
          set -euo pipefail

          echo "▶️ Semgrep rules: ${SEMGREP_RULES}"
          echo "🔎 Scan mode: ${SCAN_MODE}"
          [ "${SCAN_MODE}" = "full" ] && echo "⚠️ Full scan may be slow for large repositories"
          [ "${SCAN_MODE}" != "full" ] && echo "📍 Baseline commit: ${BASELINE}"
          echo "⛔ Fail level: ${FAIL_LEVEL}"

          CMD=(semgrep --config="${SEMGREP_RULES}" --severity="${FAIL_LEVEL^^}" --json)
          if [ "${SCAN_MODE}" = "diff" ] || [ "${SCAN_MODE}" = "baseline" ]; then
            CMD+=(--baseline-commit="${BASELINE}")
          fi

          # Execute; don't fail the step on Semgrep exit (we compute status ourselves)
          if ! "${CMD[@]}" > semgrep.json; then
            echo "Semgrep exited non-zero; proceeding with whatever results are available."
          fi
          test -s semgrep.json || echo '{"results":[]}' > semgrep.json
          echo "Semgrep JSON size: $(wc -c < semgrep.json) bytes"

      - name: Extract Semgrep metrics
        id: semgrep_metrics
        run: |
          set -euo pipefail
          # Safety: empty file → empty results array
          test -s semgrep.json || echo '{"results":[]}' > semgrep.json

          TOTAL=$(jq '.results | length' semgrep.json)
          ERR=$(jq '[.results[] | select(.extra.severity == "ERROR")]   | length' semgrep.json)
          WARN=$(jq '[.results[] | select(.extra.severity == "WARNING")] | length' semgrep.json)
          INFO=$(jq '[.results[] | select(.extra.severity == "INFO")]    | length' semgrep.json)

          {
            echo "total=${TOTAL}"
            echo "errors=${ERR}"
            echo "warnings=${WARN}"
            echo "info=${INFO}"
          } >> "$GITHUB_OUTPUT"

      - name: Upload Semgrep JSON artifact
        if: ${{ fromJSON(steps.semgrep_metrics.outputs.total) > 0 }}
        uses: actions/upload-artifact@v4
        with:
          name: semgrep-${{ github.run_id }}.json
          path: semgrep.json
          if-no-files-found: error
          retention-days: 7

      - name: Job summary
        env:
          TOTAL: ${{ steps.semgrep_metrics.outputs.total }}
          ERR: ${{ steps.semgrep_metrics.outputs.errors }}
          WARN: ${{ steps.semgrep_metrics.outputs.warnings }}
          INFO: ${{ steps.semgrep_metrics.outputs.info }}
          SEMGREP_RULES: ${{ inputs.semgrep_config }}
          SCAN_MODE: ${{ inputs.scan_mode }}
          BASELINE: ${{ env.BASELINE }}
          FAIL_LEVEL: ${{ inputs.fail_severity }}
          FILTER_MODE: ${{ steps.verified_settings.outputs.FILTER_MODE }}
          REVIEWDOG_REPORTER: ${{ steps.verified_settings.outputs.REPORTER }}
          HAS_PR: ${{ steps.pr_check.outputs.pr_exists }}
          PR_NUMBER: ${{ steps.pr_check.outputs.pr_number }}
          PR_URL: ${{ steps.pr_check.outputs.pr_url }}
        run: |
          {
            echo "## 🔎 Semgrep Summary"
            echo "triggered by: \`${{ github.event_name }}\` on \`${{ github.ref }}\`"

            if [ "${{ github.event_name }}" = "push" ]; then
              if [ "${HAS_PR}" = "true" ]; then
                echo "- **PR context**: Detected open PR [#${PR_NUMBER}](${PR_URL}); PR-style review settings applied."
              else
                echo "- **PR context**: None for this push; PR-only input settings were overridden."
              fi
            fi

            echo ""
            echo "| Total | Errors | Warnings | Info |"
            echo "|------:|------:|--------:|----:|"
            echo "| ${TOTAL:-0} | ${ERR:-0} | ${WARN:-0} | ${INFO:-0} |"
            echo ""
            echo "- **Rules**: \`${SEMGREP_RULES}\`"
            echo "- **Scan mode**: \`${SCAN_MODE}\`"
            if [ "${SCAN_MODE}" != "full" ]; then
              echo "- **Baseline**: \`${BASELINE}\`"
            else
              echo "- **Baseline**: \`n/a\`"
            fi
            echo "- **Fail level**: \`${FAIL_LEVEL}\`"
            echo "- **Review filter**: \`${FILTER_MODE}\`"
            echo "- **Reviewdog reporter**: \`${REVIEWDOG_REPORTER}\`"
          } >> "$GITHUB_STEP_SUMMARY"

      - name: Prepare reviewdog input
        id: semgrep_reviewdog_input
        if: ${{ steps.semgrep_metrics.outputs.total != '0' }}
        run: |
          jq -r '.results[] | "\(.extra.severity[0:1]):\(.path):\(.end.line) \(.extra.message)"' \
            semgrep.json > reviewdog_input.txt || :
        # If jq finds no results, file will be empty; that's fine.

      - name: Reviewdog report
        if: ${{ steps.semgrep_metrics.outputs.total != '0' }}
        env:
          REVIEWDOG_GITHUB_API_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          REVIEWDOG_REPORTER: ${{ steps.verified_settings.outputs.REPORTER }}
          REVIEWDOG_FILTER_MODE: ${{ steps.verified_settings.outputs.FILTER_MODE }}
          REVIEWDOG_FAIL_LEVEL: ${{ inputs.fail_severity }}
        run: |
          cat reviewdog_input.txt | reviewdog \
            -efm="%t:%f:%l %m" \
            -name="semgrep" \
            -reporter="$REVIEWDOG_REPORTER" \
            -filter-mode="$REVIEWDOG_FILTER_MODE" \
            -fail-level="$REVIEWDOG_FAIL_LEVEL"

      - name: Upsert PR summary comment
        if: ${{ github.event_name == 'pull_request' || steps.pr_check.outputs.pr_exists == 'true' }}
        uses: actions/github-script@v7
        env:
          PR_NUMBER: ${{ steps.pr_check.outputs.pr_number }}
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const prNumber = context.payload.pull_request?.number ?? process.env.PR_NUMBER;

            const total   = Number("${{ steps.semgrep_metrics.outputs.total || '0' }}");
            const errors  = Number("${{ steps.semgrep_metrics.outputs.errors || '0' }}");
            const warns   = Number("${{ steps.semgrep_metrics.outputs.warnings || '0' }}");
            const info    = Number("${{ steps.semgrep_metrics.outputs.info || '0' }}");

            const scanMode   = "${{ inputs.scan_mode }}";
            const rules      = "${{ inputs.semgrep_config }}";
            const failLevel  = "${{ inputs.fail_severity }}";
            const filterMode = "${{ steps.verified_settings.outputs.FILTER_MODE }}";
            const reporter   = "${{ steps.verified_settings.outputs.REPORTER }}";

            let emoji = "✅";
            let status = "passed";

            if (failLevel === "error") {
              if (errors > 0) { emoji = "❌"; status = "failed (errors)"; }
              else if (warns > 0) { emoji = "⚠️"; status = "warnings"; }
              else if (info > 0) { emoji = "ℹ️"; status = "info only"; }
            }
            else if (failLevel === "warning") {
              if (errors > 0 || warns > 0) { emoji = "❌"; status = "failed (errors/warnings)"; }
              else if (info > 0) { emoji = "ℹ️"; status = "info only"; }
            }
            else if (failLevel === "info") {
              if (total > 0) { emoji = "❌"; status = "failed (findings)"; }
            }

            const parts = [];
            if (errors > 0) parts.push(`${errors} error${errors === 1 ? "" : "s"}`);
            if (warns  > 0) parts.push(`${warns} warning${warns === 1 ? "" : "s"}`);
            if (info   > 0) parts.push(`${info} info`);

            const findings = total > 0 ? `\n\n**Findings:** ${parts.join(", ")}` :
              (scanMode === "diff" ? "\n\n🎉 No security issues found in changed code!" : "\n\n🎉 No security issues found!");

            const runUrl = `https://github.com/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId}`;

            const body = `<!-- semgrep-summary -->
            ## ${emoji} Semgrep Security Scan ${status.charAt(0).toUpperCase() + status.slice(1)}

            **Configuration:** \`${rules}\`
            **Scan mode:** \`${scanMode}\`${scanMode === "diff" ? " (changed code only)" : ""}
            **Severity threshold:** \`${failLevel}\`
            **Review filter:** \`${filterMode}\`
            **Reporter:** \`${reporter}\`${findings}

            [View run](${runUrl})

            ---
            <sub>🤖 Powered by Semgrep + reviewdog</sub>`;

            // Upsert by hidden marker to avoid duplicate comments
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: prNumber,
              per_page: 100,
            });

            const existing = comments.find(c => c.body && c.body.includes("<!-- semgrep-summary -->"));
            if (existing) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: existing.id,
                body,
              });
            } else {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: prNumber,
                body,
              });
            }


      - name: Fail on findings at/above threshold
        if: |
          (inputs.fail_severity == 'error'   && fromJSON(steps.semgrep_metrics.outputs.errors)   > 0) ||
          (inputs.fail_severity == 'warning' && (fromJSON(steps.semgrep_metrics.outputs.errors)  > 0  || fromJSON(steps.semgrep_metrics.outputs.warnings) > 0)) ||
          (inputs.fail_severity == 'info'    && fromJSON(steps.semgrep_metrics.outputs.total)    > 0)
        env:
          FAIL_SEVERITY: ${{ inputs.fail_severity }}
        run: |
          echo "❌ Semgrep exceeded fail_severity='${FAIL_SEVERITY}'"
          exit 1
          # Note: this will fail the job, but we still got findings posted via reviewdog and summary comment.
