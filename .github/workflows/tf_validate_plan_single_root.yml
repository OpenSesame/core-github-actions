name: TF Validate/Plan Single Root

on:
  workflow_call:
    inputs:
      environment:
        description: Github action environment and AWS account type
        type: string
        required: true
      oidc-domain:
        description: 'OIDC Domain. Ex: "core" or "reveng"'
        required: true
        type: string
      commit-identifier:
        description: SHA or tag to validate and plan terraform
        type: string
        required: true
      with-lock:
        description: whether to lock the state file or not, (default - true)
        type: boolean
        default: true
      write-artifact:
        description: write the terraform plan to an artifact, (default - false)
        type: boolean
        default: false
      terraform-workspace:
        description: Terraform Workspace
        type: string
        required: true
      terraform-root:
        description: Root directory of terraform
        type: string
        required: true
      terraform-version:
        description: Terraform version to use
        type: string
        required: true
      build-artifact-directory:
        description: Optional directories to create before running terraform plan. Path should be relative to the terraform-root supplied. Example - "../../lambdas/auth-api/dist/out-tsc" Use multi-line string if multiple directories are needed.
        type: string
        required: false
    secrets:
      ORG_READ_ONLY_SSH_KEY:
        required: true
      ORG_GITHUB_PACKAGES_READ_ONLY_TOKEN:
        required: true
    outputs:
      plan-artifact-name:
        description: the name of the plan artifact, if write-artifact is true
        value: ${{ jobs.TF-Validate-Plan.outputs.plan-artifact-name}}

concurrency:
  group: ${{ github.repository }}-${{ inputs.environment }}-TF-Validate-Plan

permissions:
  id-token: write # required by configure-aws-credentials
  contents: read

env:
  TF_INPUT: false
  TF_IN_AUTOMATION: true

jobs:
  TF-Validate-Plan:
    name: Terraform Validate and Plan ${{ inputs.environment }}
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment }}
    defaults: # runs all steps in this directory
      run:
        working-directory: ${{ inputs.terraform-root }}
    outputs:
      plan-artifact-name: ${{ steps.set-plan-artifact-name.outputs.artifact_name }}

    steps:
      - id: get-role-arn
        uses: OpenSesame/gha-oidc-access/get-role-arn@v2
        with:
          domain: ${{ inputs.oidc-domain }}
          env: ${{ inputs.environment }}
          ORG_READ_ONLY_SSH_KEY: ${{ secrets.ORG_READ_ONLY_SSH_KEY }}

      - uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ steps.get-role-arn.outputs.role-arn }}
          role-session-name: ${{ inputs.terraform-workspace }}-${{ inputs.environment }}-Run${{ github.run_id }}
          aws-region: ${{ steps.get-role-arn.outputs.region }}

      - name: Checkout Actions
        uses: actions/checkout@v4
        with:
          ref: ${{ inputs.commit-identifier }}

      - name: Configure Github Credentials
        id: configure-credentials
        shell: bash
        run: |
          mkdir -p ~/.ssh
          chmod 700 ~/.ssh
          echo '${{ secrets.ORG_READ_ONLY_SSH_KEY }}' > ~/.ssh/id_rsa
          ssh-keyscan github.com > ~/.ssh/known_hosts
          chmod 600 ~/.ssh/id_rsa ~/.ssh/known_hosts

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ inputs.terraform-version }}
          terraform_wrapper: false # required to access terraform outputs after apply

      # Step to create the directory if the build-artifact-directory input is provided
      - name: Ensure Build Artifact Directories Exist
        if: ${{ inputs.build-artifact-directory != '' }}
        env:
          BUILD_ARTIFACT_DIRECTORY: ${{ inputs.build-artifact-directory }}
        run: |
          set -Eeuo pipefail
          trap 'echo "::error::failed at line $LINENO: $BASH_COMMAND"' ERR
          printf 'Directories input:\n---\n%s\n---\n' "$BUILD_ARTIFACT_DIRECTORY"
          while IFS= read -r dir; do
            dir="$(printf '%s' "$dir" | tr -d '\r' | xargs)"  # strip CR, trim
            [ -z "$dir" ] && continue
            echo "Creating: [$dir]"
            mkdir -p -- "$dir"
          done <<< "$BUILD_ARTIFACT_DIRECTORY"

      - name: Terraform Init
        run: terraform init -upgrade

      - name: Terraform Validate
        run: terraform validate

      - name: Select Workplace
        run: terraform workspace select -or-create ${{ inputs.terraform-workspace }}

      - name: Terraform Re-Init
        run: terraform init -upgrade

      - name: Terraform Plan
        id: plan
        run: |
          export TF_VAR_github_personal_access_token="${{ secrets.ORG_GITHUB_PACKAGES_READ_WRITE_TOKEN }}"
          terraform plan -lock=${{ inputs.with-lock }} -out=tfplan

      - name: Write Plans to Run Comment
        id: write-plans
        env:
          TF_ENVIRONMENT: ${{ inputs.environment }}
          TF_ROOT: ${{ inputs.terraform-root }}
          TF_VERSION: ${{ inputs.terraform-version }}
        run: |
          if [ -f tfplan ]; then
            # Get workspace name for display
            WORKSPACE_NAME=$(basename "$(pwd)")

            terraform show tfplan -no-color > tfplan.txt

            # Create beautiful header with emoji and styling
            echo "## 🚀 Terraform Plan Summary" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "**Workspace:** \`$WORKSPACE_NAME\`" >> $GITHUB_STEP_SUMMARY
            echo "**AWS Environment:** \`$TF_ENVIRONMENT\`" >> $GITHUB_STEP_SUMMARY
            echo "**Terraform Root:** \`$TF_ROOT\`" >> $GITHUB_STEP_SUMMARY
            echo "**Terraform Version:** \`$TF_VERSION\`" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY

            # Create collapsible section with better styling
            echo "<details>" >> $GITHUB_STEP_SUMMARY
            echo "<summary><strong>📋 Click to view detailed Terraform plan</strong></summary>" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "~~~ terraform" >> $GITHUB_STEP_SUMMARY
            cat tfplan.txt >> $GITHUB_STEP_SUMMARY
            echo "~~~" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "</details>" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "---" >> $GITHUB_STEP_SUMMARY
          else
            echo "## ⚠️ Warning" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "No Terraform plan file found in \`$(pwd)\`" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "This may indicate an issue with the Terraform plan generation." >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "---" >> $GITHUB_STEP_SUMMARY
          fi

      - name: Set Plan Artifact Name
        id: set-plan-artifact-name
        if: ${{ inputs.write-artifact }}
        run: echo "artifact_name=${{ inputs.environment }}-tfplan-${{ github.run_id }}" >> $GITHUB_OUTPUT

      - name: Upload Plans to Artifact
        id: plan-artifact
        if: ${{ inputs.write-artifact }}
        uses: actions/upload-artifact@v4.4.0
        with:
          name: ${{steps.set-plan-artifact-name.outputs.artifact_name}}
          path: terraform/${{ inputs.environment }}/tfplan.txt
