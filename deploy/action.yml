name: "Deploy"
description: "Run deploy script and contract tests"
inputs:
  github_ssh_key:
    description: "Github SSH Key to read shared terraform modules"
    required: true
  terraform_root:
    description: "Terraform root configuration name"
    required: true
  terraform_workspace:
    description: "Terraform workspace to select"
    required: true
  node_auth_token:
    description: "Node auth token environment variable"
    required: false

runs:
  using: "composite"
  steps:
    - name: Configure Github Credentials
      shell: bash
      run: |
        mkdir -p ~/.ssh
        chmod 700 ~/.ssh
        echo '${{ inputs.github_ssh_key }}' > ~/.ssh/id_rsa
        ssh-keyscan github.com > ~/.ssh/known_hosts
        chmod 600 ~/.ssh/id_rsa ~/.ssh/known_hosts

    - name: Npm CI
      shell: bash
      run: npm ci
      env:
        NODE_AUTH_TOKEN: ${{ inputs.node_auth_token }}

    - name: Terraform Setup
      shell: bash
      working-directory: terraform/${{ inputs.terraform_root }}
      run: |
        echo terraform init
        terraform init

        echo select terraform workspace ${{ inputs.terraform_workspace }}
        node ../../node_modules/.bin/core-build select-workspace -w ${{ inputs.terraform_workspace }}

    - name: NPM Run Deploy
      id: deploy
      shell: bash
      working-directory: terraform/${{ inputs.terraform_root }}
      run: |
        echo save terraform outputs to file
        terraform output -json > outputs.json

        echo pipe outputs.json into npm run deploy
        cat outputs.json | npm run deploy --if-present

        API_ENDPOINT=$(jq -r '.tf_api_endpoint.value' outputs.json)
        echo "api_endpoint=${API_ENDPOINT}" >> $GITHUB_ENV

    - name: NPM Run Contract Tests
      shell: bash
      working-directory: terraform/${{ inputs.terraform_root }}
      run: |
        echo running contract-tests command if present
        npm run contract-tests --if-present
