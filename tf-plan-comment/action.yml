name: Terraform Plan Comment
description: Create a terraform plan comment in the PR
inputs:
  terraform_plan_file:
    description: The path to the file containing the contents of the terraform plan
    required: true
  terraform_environment:
    description: Terraform environment
    required: true

runs:
  using: composite
  steps:
    - name: Upsert PR comment (Terraform plan)
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          const CODE_BLOCK = '```';
          const planPath = '${{ inputs.terraform_plan_file }}';
          const planContents = fs.readFileSync(planPath, 'utf8');

          // üëá Add a stable marker so we can find/update the same comment
          const MARK = `<!-- tf-plan:${{ inputs.terraform_environment }} -->`;

          const body = `
          ${MARK}
          ### Terraform Plan for ${{ inputs.terraform_environment }} üîç

          <details>
          <summary>Click to view plan details</summary>

          ${CODE_BLOCK}terraform
          ${planContents}
          ${CODE_BLOCK}
          </details>

          *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Workflow: \`${{ github.workflow }}\`*
          Run: [#${process.env.GITHUB_RUN_NUMBER}](${process.env.GITHUB_SERVER_URL}/${process.env.GITHUB_REPOSITORY}/actions/runs/${process.env.GITHUB_RUN_ID})
          `;

          // Upsert by marker to avoid duplicates
          const { data: comments } = await github.rest.issues.listComments({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: context.issue.number,
            per_page: 100,
          });

          const existing = comments.find(c => c.body && c.body.includes(MARK));
          if (existing) {
            await github.rest.issues.updateComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              comment_id: existing.id,
              body,
            });
          } else {
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body,
            });
          }
